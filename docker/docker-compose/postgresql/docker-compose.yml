# A Docker Compose must always start with the version tag.
# We use '3' because it's the last version.

version: "3.8"



# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  # The name of our service is "database"
  # but you can use the name of your choice.
  # Note: This may change the commands you are going to use a little bit.
  postgres:
    # Official Postgres image from DockerHub (we use the last version)
    image: postgres:14
    container_name: postgres14
    restart: unless-stopped
    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - "0.0.0.0:5432:5432"
    expose:
      - 5432
    networks:
      - inner_network
    volumes:
      - ${PWD}/data:/var/lib/postgresql/data
    healthcheck:
      # test: ["CMD", "pg_isready", "-U", "proot"]
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "proot" ]
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_USER: proot # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: 4pVmsxTuB_5ZlnSX # The PostgreSQL password (useful to connect to the database)
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: default_db # The PostgreSQL default database (automatically created at first launch) 
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8     
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

networks:
  inner_network:
    external: true