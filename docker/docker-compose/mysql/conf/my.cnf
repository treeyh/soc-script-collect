# 参考文档 https://developer.aliyun.com/article/791251

###### [mysql]配置模块 ######
[mysql]
# 设置MySQL客户端默认字符集
default-character-set=utf8mb4
# socket=/var/lib/mysql/mysql.sock

###### [mysqld]配置模块 ######
[mysqld]
port=3306
user=mysql

# server-id 配置
server-id = 2401

sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION

datadir         = /var/lib/mysql
pid-file        = /var/run/mysqld/mysqld.pid
socket          = /var/run/mysqld/mysqld.sock


#GROUP_CONCAT长度
group_concat_max_len =99999

#控制文件打开的个数；
open_files_limit = 10240

# MySQL8 的密码认证插件
authentication_policy=mysql_native_password,,

# 0 表名存储为给定的大小和比较是区分大小写的
# 1 表名存储在磁盘是小写的，但是比较的时候是不区分大小写
# 2 表名存储为给定的大小写但是比较的时候是小写的
# unix,linux下lower_case_table_names默认值为 0 .Windows下默认值是 1 .Mac OS X下默认值是 2
lower_case_table_names = 1

gtid_mode=ON
enforce_gtid_consistency=ON
log_replica_updates=1

#当外部锁定（external-locking）起作用时，每个进程若要访问数据表,
#则必须等待之前的进程完成操作并解除锁定。由于服务器访问数据表时经常需要等待解锁,
#因此在单服务器环境下external locking会让MySQL性能下降。
#所以在很多Linux发行版的源中，MySQL配置文件中默认使用了skip-external-locking来避免external locking。
skip-external-locking

#跳过DNS反向解析
skip-name-resolve

skip-host-cache

#关闭TIMESTAMP类型默认值
explicit_defaults_for_timestamp

#不受client字符集影响，保证sever端字符集
skip-character-set-client-handshake

#开启慢查询日志
slow_query_log

# 所有的使用了比这个时间(以秒为单位)更多的查询会被认为是慢速查询.
# 不要在这里使用”0″, 否则会导致所有的查询,甚至非常快的查询页被记录下来(由于MySQL 目前时间的精确度只能达到秒的级别).
long_query_time = 0.5

#慢查询日志位置
slow_query_log_file=/var/lib/mysql/mysql-slow.log


#单位秒,握手时间超过connect_timeout,连接请求将会被拒绝
connect_timeout = 10

binlog_format=ROW

# 打开二进制日志功能.
# 在复制(replication)配置中,作为MASTER主服务器必须打开此项
# 如果你需要从你最后的备份中做基于时间点的恢复,你也同样需要二进制日志
log-bin=/var/lib/mysql/mysql-bin

#relay-log日志
relay-log=mysql-relay-bin

#master-info-repository以及relay-log-info-repository打开以启用崩溃安全的二进制日志/从服务器功能（在事务表而不是平面文件中存储信息）
#master-info-repository=TABLE
#relay-log-info-repository=TABLE

#不写入binlog二进制日志中的数据库
binlog-ignore-db=mysql # No sync databases
binlog-ignore-db=test # No sync databases
binlog-ignore-db=information_schema # No sync databases
binlog-ignore-db=performance_schema # No sync databases

#写入binlog二进制日志中数据库
#binlog-do-db=business_db
#binlog-do-db=user_db
#binlog-do-db=plocc_system

#清理binlog
binlog_expire_logs_seconds=1296000
max_binlog_size = 1073741824 # Bin logs size ( 1G )

#使binlog在每1000次binlog写入后与硬盘同步
#sync_binlog = 1000
#指定只复制哪个库的数据
#replicate-do-db=business_db
#replicate-do-db=user_db
#replicate-do-db=plocc_system
#开启事件调度器Event Scheduler
#event_scheduler=1

# 允许最大连接数
max_connections = 4096


# 服务端使用的字符集默认为8比特编码的latin1字符集
character_set_server=utf8mb4
collation_server=utf8mb4_general_ci

# 表名存储在磁盘是小写的，但是比较的时候是不区分大小写
lower_case_table_names=0

#设置在网络传输中一次消息传输量的最大值。系统默认值 为1MB，最大值是1GB，必须设置1024的倍数。
#当与大的BLOB字段一起工作时相当必要
max_allowed_packet=64M 

# 设置时区
default-time_zone='+8:00'


# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB

#这对Innodb表来说非常重要，Innodb把所有的数据和索引都缓存起来，此参数设置越大，数据存取时所需要的磁盘I/O越少。
#Innodb比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。
#注意：
#1. 当然如果你的数据量不大，并且不会暴增，也无需把 innodb_buffer_pool_size 设置的太大
#2. 如果在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%
#3. 注意在32位系统上你每个进程可能被限制在 2-3.5G,
#属重点优化参数
innodb_buffer_pool_size = 2048M

# 如果设置为1 ,InnoDB会在每次事务提交后将事务日志写到磁盘上,
# 基于性能考虑，可以设置为0或2，但要承担在发生故障时丢失数据的风险。
# 0代表日志只大约每秒写入日志文件并且日志文件刷新到磁盘.
# 2代表每次提交后日志写入日志文件,但是日志文件每秒刷新到磁盘上。
# 几点说明：
# 1. 如果是游戏服务器，建议此值设置为2；如果是对数据安全要求极高的应用，建议设置为1；
# 2. 设置为0性能最高，但如果发生故障，数据可能会有丢失的危险!
# 3. 默认值1每一次事务提交都需要把日志写到硬盘，这是很费时的。
# 4. 特别是使用电池供电缓存(Battery backed up cache)时。设成2对于很多运用，特别是从MyISAM表转过来的是可以的，
# 5. 它的意思是不写入硬盘而是写入系统缓存。日志仍然会每秒flush到硬盘，所以你一般不会丢失超过1-2秒的更新。
# 6. 设成0会更快一点，但安全方面比较差，即使MySQL挂了也可能会丢失事务的数据。而值2只会在整个操作系统挂了时才可能丢数据
#属重点优化参数
innodb_flush_log_at_trx_commit = 2

#此参数用于确定日志文件的大小
#为避免在日志文件覆写上不必要的缓冲池刷新
#一般设置为日志文件总合大小到你缓冲池大小的25%~100%
#但这同时也会增加恢复故障数据库所需的时间
innodb_redo_log_capacity=2147483648


#设置在多少秒没收到主库传来的Binary Logs events之后,从库认为网络超时,Slave IO线程会重新连接主库。
#该参数的默认值是3600s ，然而时间太久会造成数据库延迟或者主备库直接的链接异常不能及时发现。
#将 slave_net_timeout 设得很短会造成 Master 没有数据更新时频繁重连。一般线上设置为5s
# slave_net_timeout = 5

#这个参数用来配置从服务器的更新是否写入二进制日志，这个选项默认是不打开的，
#但是，如果这个从服务器B是服务器A的从服务器，同时还作为服务器C的主服务器，那么就需要开发这个选项，
#这样它的从服务器C才能获得它的二进制日志进行同步操作
#log-slave-updates=1

#用于slave服务器，io线程会把server id与自己相同的event写入日志，与log-slave-updates选项冲突
#replicate-same-server-id=0


# 在一个事务中binlog为了记录SQL状态所持有的cache大小
# 如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.
# 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中
# 如果事务比此值大, 会使用磁盘上的临时文件来替代.
# 此缓冲在每个连接的事务第一次更新状态时被创建
binlog_cache_size = 1M

###### [client]配置模块 ######
[client]
default-character-set=utf8mb4

[mysqldump]
# 不要在将内存中的整个结果写入磁盘之前缓存. 在导出非常巨大的表时需要此项
max_allowed_packet = 64M